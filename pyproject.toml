[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "functional_connectivity"
dynamic = ["version"]
description = "Functional Connectivity for A2CPS"
readme = "README.md"
requires-python = ">=3.10"
keywords = []
authors = [{ name = "Patrick Sadil", email = "psadil1@jh.edu" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "ancpbids==0.2.1",
  "click",
  "dask",
  "indexed_gzip",
  "nibabel",
  "nilearn",
  "numpy",
  "pandas",
  "prefect",
  "prefect-dask",
  "pydantic",
  "pyarrow",
  "scipy",
  "scikit-image",
  "scikit-learn",
]

[project.urls]
Documentation = "https://github.com/unknown/functional_connectivity#readme"
Issues = "https://github.com/unknown/functional_connectivity/issues"
Source = "https://github.com/unknown/functional_connectivity"

[project.scripts]
functional_connectivity = "functional_connectivity.cli.functional_connectivity:main"

[tool.hatch.version]
source = "vcs"
fallback-version = "23.0.1"


[tool.hatch.envs.test]
dependencies = ["coverage[toml]>=6.5", "pytest"]

[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = ["black>=23.1.0", "mypy>=1.0.0", "ruff>=0.0.243"]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/functional_connectivity tests}"
style = ["ruff {args:.}", "black --check --diff {args:.}"]
fmt = ["black {args:.}", "ruff --fix {args:.}", "style"]
all = ["style", "typing"]

[tool.black]
target-version = ["py37"]
line-length = 80
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  # Allow boolean kwargs in function definitions
  "FBT001",
  "FBT002",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["functional_connectivity"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["functional_connectivity", "tests"]
branch = true
parallel = true
omit = ["src/functional_connectivity/__about__.py"]

[tool.coverage.paths]
functional_connectivity = [
  "src/functional_connectivity",
  "*/functional_connectivity/src/functional_connectivity",
]
tests = ["tests", "*/functional_connectivity/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
